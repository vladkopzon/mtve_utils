#!/usr/bin/env python3

import sys
import os
import hjson
import re
import logging

from utils.fuses.fuse_formatters import *

class fuse (object):

    def __init__(self, configfile=None, technology='TSMC28'):
        self.configfile = os.path.abspath(configfile)
        self.technology = technology
        self.DEFAULT_FUSE_VALUE = 0
        self.CFG = {}
        self.FDB = {}
        self.FDB['FUSES'] = {}
        self.FDB['__SIZES'] = {}
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        
    
    def parse_num(self, s, width):
        if isinstance(s, str):
            if s.startswith('0x'):
                return bin(int(s, 16))[2:].zfill(width)[-width:]
        try:
            return bin(int(s))[2:].zfill(width)[-width:]
        except ValueError:
            self.logger.error ('ERROR[UNF]: Unsupported number format: <%s>' % s)

    def load_config(self):
        total_len = 0
        try:
            # Open the Hjson file and load its contents
            with open(self.configfile, 'r') as hjson_file:
                self.CFG = hjson.load(hjson_file)
                self.logger.debug(self.CFG)
        except FileNotFoundError:
            self.logger.critical(f"The file '{self.configfile}' was not found.")
            return(-1)
        except hjson.decoder.HjsonDecodeError as e:
            print(f"Error decoding Hjson: {e}")
            return(-1)

        for section, fields in self.CFG['__FUSE_MAP__'].items():
            section_size = 0
            self.logger.debug ('section=%s:%d' % (section, fields['__SIZE__']))
            self.FDB['FUSES'][section] = {}
            for field in fields.get('__FIELDS__', []):
                if isinstance(fields['__FIELDS__'][field], list):
                    # field in format size:value
                    size = fields['__FIELDS__'][field][0]
                    value = self.parse_num(fields['__FIELDS__'][field][1], size)
                else:
                    size = fields['__FIELDS__'][field]
                    if size == '__THE_REST__':
                        size = fields['__SIZE__'] - section_size
                    value = self.parse_num(self.DEFAULT_FUSE_VALUE, size)
                self.logger.debug('  %s=%d:0b%s' % (field, size, value))
                self.FDB['FUSES'][section][field] = {"value": value, "size": size}
                section_size += size
            total_len += section_size
            self.FDB['__SIZES'][section] = section_size
            if section_size != fields['__SIZE__']:
                self.logger.error('FATAL[WSS]: Section size is wrong. Exiting... : [%s-configured<%d>!=actual<%d>]' %
                       (section, section_size, fields['__SIZE__'] ))
                return(-1)

        if total_len != self.CFG['__FUSE_BLOCK_SIZE__']:
            self.logger.error('ERROR[CFC]: Configuration file corrupted. Total length is wrong. Physical=%d, actual=%d' %
                   (self.CFG['__FUSE_BLOCK_SIZE__'], total_len))
            return(-1)

    def write_fuse_image(self, output=sys.stdout, no_comments=False, formatter='raw'):
        status = True
        if not no_comments:
            print('// Generated by: [%s]' % (os.path.abspath(__file__)), file=output)
            print('// Configuration File[%s]: %s\n' % (self.technology, self.configfile), file=output)
        if formatter == "raw":
            print(self.FDB, file=output)
        elif formatter == "human":
            for section, fields in self.FDB['FUSES'].items():
                print("Section: %s" % section, file=output)
                width = 1 + len(max(fields, key=len))
                for fn, f in fields.items():
                    fname = "{:<{}}".format(fn, width)
                    value = f['value']
                    if self.check_zeros(value):
                        value = ''
                    print("    %s = [%3d] %s" % (fname, f['size'], value), file=output)
                print("", file=output)
        elif formatter == "bin":
            vector = self.get_verilog_load_vector()
            print('//transpose 0-1023 <-> 0,32,64...992, 1,33,65...993, ... ..., 31,63...1023', file=output)
            print("\n".join(vector), file=output)
        else:
            formatter += '_formatter'
            format_function = globals().get(formatter)
            if format_function:
                status = format_function(F=self, output=output)
            else:
                self.logger.critical("Formatter not defined: [%s]" % formatter)
                status = False
        return(status)

    def load_fuse_image(self, fname="", image_format="bin_vector"):
        with open(fname, 'r') as f:
            # Read lines into a list, skipping lines starting with '//' or '\n'
            bin_vector = [line.strip() for line in f if not (line.startswith('/') or line == '\n')]

        bin_vector_len = len(bin_vector)
        bin_vector = self.fuse_transpose(vector=bin_vector)
        
        self.logger.debug("[len=%d] %s" % (bin_vector_len, bin_vector))
        if bin_vector_len != self.CFG['__FUSE_BLOCK_SIZE__']:
            self.logger.error('FATAL[ISM]: image size [%d] doesnt match __FUSE_BLOCK_SIZE__ [%d] in cfg file'
                         % (bin_vector_len, self.CFG['__FUSE_BLOCK_SIZE__']))
            return (-1)
        pos = 0
        for section, fields in self.FDB['FUSES'].items():
            self.logger.debug("Loading section: %s" % section)
            for fn, f in fields.items():
                value = "".join(bin_vector[pos:pos+f['size']])
                pos += f['size']
                self.logger.debug("  loading value: %s = %s" % (fn, value))
                self.FDB['FUSES'][section][fn]['value'] = value
        self.logger.info("INFO: image loaded: %d bits." % bin_vector_len)


    def set_fuse(self, flist=None):
        for setd in flist:
            try:
                actual_width  = self.FDB['FUSES'][setd['section']][setd['field']]['size']
                binary_string = format(setd['value'], '0{}b'.format(actual_width))  
                if len(binary_string) == actual_width:
                    self.FDB['FUSES'][setd['section']][setd['field']]['value'] = binary_string
                else:
                    self.logger.critical("[SMS]: Size mistmatch on value set %s. Actual size of [%d] doesn't match the requested [%d]"
                                      % (setd, actual_width, len(binary_string)))
            except KeyError:
                self.logger.critical(f"[SEF]: Set element failed due to NameError: {setd}")
                raise Exception('SEF')

                
    def check_zeros(self, string):
        if string.isdigit() and string.count('0') == len(string):
            return True
        else:
            return False


    def fuse_transpose(self, vector=''):
        #transpose 0-1023 <-> 0,32,64...992, 1,33,65...993, ... ..., 31,63...1023
        tmp_vector = ''
        self.logger.debug('IN: %s' % vector)
        for i in range(self.CFG['__FUSE_X__']):
            for j in range(self.CFG['__FUSE_Y__']):
                ind = j * self.CFG['__FUSE_X__'] + i
                #print(i, j, ind)
                tmp_vector += vector[ind]
        self.logger.debug('OUT: %s' % tmp_vector)
        return tmp_vector

    def get_human_vector(self):
        bin_vector = ''
        for section, fields in self.FDB['FUSES'].items():
            for fn, f in fields.items():
                bin_vector += f['value']
        return bin_vector



    def get_verilog_load_vector(self):
        bin_vector = ''
        for section, fields in self.FDB['FUSES'].items():
            #print (f'section: {section}')
            for fn, f in fields.items():
                #print (f'field:{fn} {f}')
                bin_vector += f['value']

        return self.fuse_transpose(bin_vector[::-1])
    

    
if __name__ == "__main__":
    import fuse_formatters
    import argparse
    logging.basicConfig(format='%(levelname)s - %(module)s.%(funcName)s - %(message)s')
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument('-cfg_file', type=str, required=True,
                        help='Specify config hjson file')
    parser.add_argument('-output', type=str, required=True,
                        help="Output file name and format by extention: [.bin|.human|.raw|.h]. In absense of ext all supported views will be generated")
    parser.add_argument('-dev' ,  action='store_true',
                        help='For script development only')

    args = parser.parse_args()

    F = fuse(configfile=args.cfg_file)
    F.load_config()

    fname, fextension = os.path.splitext(args.output)
    fextension = fextension[1:]
    if fextension=="":          # all views to be generated
        all_formats = fuse_formatters.__all_formatters__
        all_formats += ['bin', 'human', 'raw', 'shadow']
    else:
        all_formats = [fextension]

    for frmt in all_formats:
        try:
            with open(fname+'.'+frmt, "w") as f:
                status = F.write_fuse_image(output=f, formatter=frmt)
                f.close()
                if status:
                    logger.info(f"FUSE output file successfully created [.{frmt}]")
                else:
                    logger.info("No output generated. See previous errors!")
        except FileNotFoundError:
            logger.critical(f"The file '{args.output}' was not found.")
            logger.error("No output generated. See previous errors!")
            exit(0)

            
    ################################################################################
    # for dev only:
    ################################################################################
    if args.dev:
        F.set_fuse([{'section':'production', 'field':'FAB',  'value': 0x2},
                    {'section':'production', 'field':'YEAR', 'value': 10}])

        F.set_fuse([{'section': 'production', 'field': 'fuse_force_secure_en', 'value': 0}])

        with open("/tmp/fuse_image_after_set.human", "w") as f:
            F.write_fuse_image(output=f, formatter='human')
            f.close()
        # print(F.get_verilog_load_vector())
        # print(F.get_human_vector())

